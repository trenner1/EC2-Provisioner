---
- name: Configure EC2 instance with ML tools and Anaconda (using /data)
  hosts: all
  become: true
  tasks:
    # Ensure /data directory exists
    - name: Ensure /data exists
      file:
        path: /data
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"

    # Check if /var/cache/apt exists and collect details
    - name: Check if /var/cache/apt exists
      stat:
        path: /var/cache/apt
      register: apt_cache_status

    # Debug the properties of /var/cache/apt
    - name: Debug /var/cache/apt properties
      debug:
        msg: "{{ apt_cache_status.stat }}"

    # Remove /var/cache/apt if it is not a directory
    - name: Remove /var/cache/apt if it is not a directory
      command: rm -rf /var/cache/apt
      when: apt_cache_status.stat.exists and not apt_cache_status.stat.isdir

    # Ensure /var/cache/apt exists as a directory
    - name: Ensure /var/cache/apt exists as a directory
      file:
        path: /var/cache/apt
        state: directory
        owner: root
        group: root
        mode: "0755"

    # Ensure /var/cache/apt/archives exists
    - name: Ensure /var/cache/apt/archives exists
      file:
        path: /var/cache/apt/archives
        state: directory
        owner: root
        group: root
        mode: "0755"

    # Ensure /var/cache/apt/archives/partial exists
    - name: Ensure /var/cache/apt/archives/partial exists
      file:
        path: /var/cache/apt/archives/partial
        state: directory
        owner: root
        group: root
        mode: "0755"

    # Update apt cache
    - name: Update apt cache
      apt:
        update_cache: yes

    # Redirect apt cache to /data/apt-cache
    - name: Redirect apt cache to /data/apt-cache
      shell: |
        mkdir -p /data/apt-cache
        rsync -a /var/cache/apt/ /data/apt-cache/
        rm -rf /var/cache/apt
        ln -s /data/apt-cache /var/cache/apt
      args:
        creates: /data/apt-cache

    # Install required system packages
    - name: Install required system packages
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - curl
          - wget
          - docker.io
        state: present
        update_cache: yes

    # Enable and start Docker
    - name: Enable and start Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    # Redirect Docker storage to /data/docker
    - name: Redirect Docker storage to /data
      shell: |
        mkdir -p /data/docker
        systemctl stop docker
        rsync -a /var/lib/docker/ /data/docker/
        rm -rf /var/lib/docker
        ln -s /data/docker /var/lib/docker
        systemctl start docker
      args:
        creates: /data/docker

    # Set TMPDIR to /data/tmp
    - name: Ensure /data/tmp directory exists
      file:
        path: /data/tmp
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "1777"

    - name: Set TMPDIR environment variable to /data/tmp
      lineinfile:
        path: /etc/environment
        line: 'TMPDIR="/data/tmp"'
        state: present

    # Check if Python virtual environment exists
    - name: Check if Python virtual environment exists
      stat:
        path: /data/venv/bin/activate
      register: venv_check

    # Create Python virtual environment
    - name: Create Python virtual environment
      command: python3 -m venv /data/venv
      args:
        creates: /data/venv/bin/activate
      when: not venv_check.stat.exists

    # Install required Python packages in venv
    - name: Install required Python packages in virtual environment
      shell: |
        source /data/venv/bin/activate
        pip install mlflow flask numpy pandas scipy matplotlib seaborn scikit-learn jupyter
      args:
        executable: /bin/bash

    # Update PATH to include the virtual environment
    - name: Add virtual environment to PATH
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        line: 'export PATH="/data/venv/bin:$PATH"'
        state: present

    - name: Source updated PATH
      shell: bash -c "source /home/{{ ansible_user }}/.bashrc"
      args:
        executable: /bin/bash

    # Check if Anaconda is already installed
    - name: Check if Anaconda is installed
      stat:
        path: /data/anaconda/bin/conda
      register: anaconda_check

    # Download Anaconda installer
    - name: Download Anaconda installer
      get_url:
        url: "https://repo.anaconda.com/archive/Anaconda3-2023.07-1-Linux-x86_64.sh"
        dest: "/data/tmp/Anaconda3.sh"
        mode: "0755"
      when: not anaconda_check.stat.exists

    # Install Anaconda
    - name: Install Anaconda to /data
      command: bash /data/tmp/Anaconda3.sh -b -p /data/anaconda
      args:
        creates: /data/anaconda
      when: not anaconda_check.stat.exists

    # Update PATH to include Anaconda
    - name: Add Anaconda to PATH for user
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        line: 'export PATH="/data/anaconda/bin:$PATH"'
        state: present

    - name: Source updated PATH for Anaconda
      shell: bash -c "source /home/{{ ansible_user }}/.bashrc"
      args:
        executable: /bin/bash
